/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 域名
 * 域名系统相关的接口
 *
 * OpenAPI spec version: v1
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.domain.client;

import com.jdcloud.sdk.JdcloudSdkException;
import com.jdcloud.sdk.auth.CredentialsProvider;
import com.jdcloud.sdk.client.Environment;
import com.jdcloud.sdk.client.Jdcloud;
import com.jdcloud.sdk.client.JdcloudClient;
import com.jdcloud.sdk.client.JdcloudValidateException;
import com.jdcloud.sdk.http.HttpRequestConfig;
import com.jdcloud.sdk.service.domain.model.CheckDomainRequest;
import com.jdcloud.sdk.service.domain.model.CheckDomainResponse;
import com.jdcloud.sdk.service.domain.client.CheckDomainExecutor;
import com.jdcloud.sdk.service.domain.model.DomainTemplateAssignedRequest;
import com.jdcloud.sdk.service.domain.model.DomainTemplateAssignedResponse;
import com.jdcloud.sdk.service.domain.client.DomainTemplateAssignedExecutor;
import com.jdcloud.sdk.service.domain.model.RenewDomainRequest;
import com.jdcloud.sdk.service.domain.model.RenewDomainResponse;
import com.jdcloud.sdk.service.domain.client.RenewDomainExecutor;
import com.jdcloud.sdk.service.domain.model.DomainLockRequest;
import com.jdcloud.sdk.service.domain.model.DomainLockResponse;
import com.jdcloud.sdk.service.domain.client.DomainLockExecutor;
import com.jdcloud.sdk.service.domain.model.CreateDomainRequest;
import com.jdcloud.sdk.service.domain.model.CreateDomainResponse;
import com.jdcloud.sdk.service.domain.client.CreateDomainExecutor;
import com.jdcloud.sdk.service.domain.model.DomainInfoRequest;
import com.jdcloud.sdk.service.domain.model.DomainInfoResponse;
import com.jdcloud.sdk.service.domain.client.DomainInfoExecutor;
import com.jdcloud.sdk.service.domain.model.DeleteTemplateRequest;
import com.jdcloud.sdk.service.domain.model.DeleteTemplateResponse;
import com.jdcloud.sdk.service.domain.client.DeleteTemplateExecutor;
import com.jdcloud.sdk.service.domain.model.ModifyTemplateInfoRequest;
import com.jdcloud.sdk.service.domain.model.ModifyTemplateInfoResponse;
import com.jdcloud.sdk.service.domain.client.ModifyTemplateInfoExecutor;
import com.jdcloud.sdk.service.domain.model.GetDomainTransferOutPassWordRequest;
import com.jdcloud.sdk.service.domain.model.GetDomainTransferOutPassWordResponse;
import com.jdcloud.sdk.service.domain.client.GetDomainTransferOutPassWordExecutor;
import com.jdcloud.sdk.service.domain.model.TransferinDomainRequest;
import com.jdcloud.sdk.service.domain.model.TransferinDomainResponse;
import com.jdcloud.sdk.service.domain.client.TransferinDomainExecutor;
import com.jdcloud.sdk.service.domain.model.DomainUnLockRequest;
import com.jdcloud.sdk.service.domain.model.DomainUnLockResponse;
import com.jdcloud.sdk.service.domain.client.DomainUnLockExecutor;
import com.jdcloud.sdk.service.domain.model.QueryTemplateInfoRequest;
import com.jdcloud.sdk.service.domain.model.QueryTemplateInfoResponse;
import com.jdcloud.sdk.service.domain.client.QueryTemplateInfoExecutor;
import com.jdcloud.sdk.service.domain.model.CertificateTemplateRequest;
import com.jdcloud.sdk.service.domain.model.CertificateTemplateResponse;
import com.jdcloud.sdk.service.domain.client.CertificateTemplateExecutor;
import com.jdcloud.sdk.service.domain.model.ModifyDnsRequest;
import com.jdcloud.sdk.service.domain.model.ModifyDnsResponse;
import com.jdcloud.sdk.service.domain.client.ModifyDnsExecutor;
import com.jdcloud.sdk.service.domain.model.CertificateTemplateStateRequest;
import com.jdcloud.sdk.service.domain.model.CertificateTemplateStateResponse;
import com.jdcloud.sdk.service.domain.client.CertificateTemplateStateExecutor;
import com.jdcloud.sdk.service.domain.model.TransferinDomainStateRequest;
import com.jdcloud.sdk.service.domain.model.TransferinDomainStateResponse;
import com.jdcloud.sdk.service.domain.client.TransferinDomainStateExecutor;
import com.jdcloud.sdk.service.domain.model.QueryWhoisInfoRequest;
import com.jdcloud.sdk.service.domain.model.QueryWhoisInfoResponse;
import com.jdcloud.sdk.service.domain.client.QueryWhoisInfoExecutor;
import com.jdcloud.sdk.service.domain.model.CreateTemplateRequest;
import com.jdcloud.sdk.service.domain.model.CreateTemplateResponse;
import com.jdcloud.sdk.service.domain.client.CreateTemplateExecutor;

/**
 * domainClient
 */
public class DomainClient extends JdcloudClient {

    public final static String ApiVersion = "v1";
    private final static String UserAgentPrefix = "JdcloudSdkJava";
    public final static String ClientVersion = "1.2.3";
    public final static String DefaultEndpoint = "domain.jdcloud-api.com";
    public final static String ServiceName = "domain";
    public final static String UserAgent = UserAgentPrefix + "/" + ClientVersion + " " + ServiceName + "/" + ApiVersion;

    CredentialsProvider credentialsProvider;
    HttpRequestConfig httpRequestConfig;
    Environment environment = new Environment.Builder().endpoint(DefaultEndpoint).build();

    public CredentialsProvider getCredentialsProvider() {
        return credentialsProvider;
    }

    public HttpRequestConfig getHttpRequestConfig() {
        return httpRequestConfig;
    }

    public Environment getEnvironment() {
        return environment;
    }

    public String getUserAgent() {
        return UserAgent;
    }

    public String getServiceName() {
        return ServiceName;
    }

    public String getVersion() {
        return ApiVersion;
    }

    private DomainClient() {

    }

    public static Builder builder() {
        return new DefaultBuilder();
    }


    /**
     * 检查域名是否可以注册
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CheckDomainResponse checkDomain(CheckDomainRequest request) throws JdcloudSdkException {
        return new CheckDomainExecutor().client(this).execute(request);
    }

    /**
     * 通过已实名的信息模板，完成域名的快速过户
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DomainTemplateAssignedResponse domainTemplateAssigned(DomainTemplateAssignedRequest request) throws JdcloudSdkException {
        return new DomainTemplateAssignedExecutor().client(this).execute(request);
    }

    /**
     * 针对用户的域名进行续费
域名续费前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public RenewDomainResponse renewDomain(RenewDomainRequest request) throws JdcloudSdkException {
        return new RenewDomainExecutor().client(this).execute(request);
    }

    /**
     * 域名锁定，设置域名状态为禁止转移
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DomainLockResponse domainLock(DomainLockRequest request) throws JdcloudSdkException {
        return new DomainLockExecutor().client(this).execute(request);
    }

    /**
     * 域名注册
域名注册前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateDomainResponse createDomain(CreateDomainRequest request) throws JdcloudSdkException {
        return new CreateDomainExecutor().client(this).execute(request);
    }

    /**
     * 查询用户的域名信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DomainInfoResponse domainInfo(DomainInfoRequest request) throws JdcloudSdkException {
        return new DomainInfoExecutor().client(this).execute(request);
    }

    /**
     * 删除域名信息模板
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DeleteTemplateResponse deleteTemplate(DeleteTemplateRequest request) throws JdcloudSdkException {
        return new DeleteTemplateExecutor().client(this).execute(request);
    }

    /**
     * 修改域名信息模板
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyTemplateInfoResponse modifyTemplateInfo(ModifyTemplateInfoRequest request) throws JdcloudSdkException {
        return new ModifyTemplateInfoExecutor().client(this).execute(request);
    }

    /**
     * 获取转移密码，用于域名转移注册商转出获取域名转移密码
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public GetDomainTransferOutPassWordResponse getDomainTransferOutPassWord(GetDomainTransferOutPassWordRequest request) throws JdcloudSdkException {
        return new GetDomainTransferOutPassWordExecutor().client(this).execute(request);
    }

    /**
     * 用于提交域名转入操作
要转入域名前，请确保用户的京东云账户有足够的资金支付，Openapi接口回返回订单号，可以用此订单号向计费系统查阅详情

     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public TransferinDomainResponse transferinDomain(TransferinDomainRequest request) throws JdcloudSdkException {
        return new TransferinDomainExecutor().client(this).execute(request);
    }

    /**
     * 域名解锁，，取消域名禁止转移的状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public DomainUnLockResponse domainUnLock(DomainUnLockRequest request) throws JdcloudSdkException {
        return new DomainUnLockExecutor().client(this).execute(request);
    }

    /**
     * 查询域名信息模板
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public QueryTemplateInfoResponse queryTemplateInfo(QueryTemplateInfoRequest request) throws JdcloudSdkException {
        return new QueryTemplateInfoExecutor().client(this).execute(request);
    }

    /**
     * 域名信息模板实名认证
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CertificateTemplateResponse certificateTemplate(CertificateTemplateRequest request) throws JdcloudSdkException {
        return new CertificateTemplateExecutor().client(this).execute(request);
    }

    /**
     * 根据域名修改域名对应的 DNS 信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public ModifyDnsResponse modifyDns(ModifyDnsRequest request) throws JdcloudSdkException {
        return new ModifyDnsExecutor().client(this).execute(request);
    }

    /**
     * 查询域名信息模板实名认证状态
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CertificateTemplateStateResponse certificateTemplateState(CertificateTemplateStateRequest request) throws JdcloudSdkException {
        return new CertificateTemplateStateExecutor().client(this).execute(request);
    }

    /**
     * 域名转入状态查询
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public TransferinDomainStateResponse transferinDomainState(TransferinDomainStateRequest request) throws JdcloudSdkException {
        return new TransferinDomainStateExecutor().client(this).execute(request);
    }

    /**
     * 查询域名的whois信息
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public QueryWhoisInfoResponse queryWhoisInfo(QueryWhoisInfoRequest request) throws JdcloudSdkException {
        return new QueryWhoisInfoExecutor().client(this).execute(request);
    }

    /**
     * 创建域名信息模板
     *
     * @param request
     * @return
     * @throws JdcloudSdkException
     */
    public CreateTemplateResponse createTemplate(CreateTemplateRequest request) throws JdcloudSdkException {
        return new CreateTemplateExecutor().client(this).execute(request);
    }


    public interface Builder {
        public Builder credentialsProvider(CredentialsProvider provider);
        public Builder environment(Environment environment);
        public Builder httpRequestConfig(HttpRequestConfig config);
        public DomainClient build() throws JdcloudSdkException;
    }

    private static class DefaultBuilder implements Builder {

        private DomainClient domainClient;

        public DefaultBuilder() {
            domainClient = new DomainClient();
        }

        public DefaultBuilder credentialsProvider(CredentialsProvider provider) {
            domainClient.credentialsProvider = provider;
            return this;
        }

        public DefaultBuilder httpRequestConfig(HttpRequestConfig config) {
            domainClient.httpRequestConfig = config;
            return this;
        }

        public DomainClient build() throws JdcloudSdkException {

            if (domainClient.credentialsProvider == null) {
                //if credentialsProvider not set, try load jdcloud global default  credentials provider
                domainClient.credentialsProvider = Jdcloud.defaultInstance().getCredentialsProvider();
                if (domainClient.credentialsProvider == null) {
                    throw new JdcloudValidateException("DomainClient build error: jdcloud credentials provider not set");
                }
            }
            if (domainClient.httpRequestConfig == null) {
                domainClient.httpRequestConfig = Jdcloud.defaultInstance().getHttpRequestConfig();
                if (domainClient.httpRequestConfig == null) {
                    throw new JdcloudValidateException("DomainClient build error: http request config not set");
                }
            }
            return domainClient;
        }

        public Builder environment(Environment environment) {
            domainClient.environment = environment;
            return this;
        }
    }
}
