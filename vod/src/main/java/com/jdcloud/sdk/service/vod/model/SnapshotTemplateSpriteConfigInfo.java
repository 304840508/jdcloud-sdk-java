/*
 * Copyright 2018 JDCLOUD.COM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http:#www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 * 
 *
 * 
 * Contact: 
 *
 * NOTE: This class is auto generated by the jdcloud code generator program.
 */

package com.jdcloud.sdk.service.vod.model;


/**
 * 雪碧图模板配置信息
 */
public class SnapshotTemplateSpriteConfigInfo  implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * 截图开始时间，单位毫秒，缺省值为 0
     */
    private Long startTime;

    /**
     * 截图间隔时间，单位毫秒，缺省值为 0
     */
    private Long intervalTime;

    /**
     * 小图行数，取值必须大于 0
     */
    private Integer rows;

    /**
     * 小图列数，取值必须大于 0
假设 rows * columns &#x3D; N
若 intervalTime 为 0，则从 startTime 开始，平均截取 N 张图片；
若 intervalTime 不为 0，则从 startTime 开始，依次间隔截图，最多截取 N 张图，若实际截图张数小于 N，则雪碧图合成时用黑图填充

     */
    private Integer columns;

    /**
     * 截图存储格式。取值范围：png、jpg
     */
    private String format;

    /**
     * 截图帧类型。取值范围：any、key
     */
    private String frameType;

    /**
     * 截图宽度，单位 px，取值须大于 0
     */
    private Integer cellWidth;

    /**
     * 截图高度，单位 px，取值须大于 0
若 width、height 都不为 0，则截图分辨率为 width * height
若 width、height 某一项为 0，则该项随另一项等比缩放
若 width、height 两项都为 0, 则截图分辨率随源视频

     */
    private Integer cellHeight;

    /**
     * 是否保留原截图
     */
    private Boolean doKeepShots;


    /**
     * get 截图开始时间，单位毫秒，缺省值为 0
     *
     * @return
     */
    public Long getStartTime() {
        return startTime;
    }

    /**
     * set 截图开始时间，单位毫秒，缺省值为 0
     *
     * @param startTime
     */
    public void setStartTime(Long startTime) {
        this.startTime = startTime;
    }

    /**
     * get 截图间隔时间，单位毫秒，缺省值为 0
     *
     * @return
     */
    public Long getIntervalTime() {
        return intervalTime;
    }

    /**
     * set 截图间隔时间，单位毫秒，缺省值为 0
     *
     * @param intervalTime
     */
    public void setIntervalTime(Long intervalTime) {
        this.intervalTime = intervalTime;
    }

    /**
     * get 小图行数，取值必须大于 0
     *
     * @return
     */
    public Integer getRows() {
        return rows;
    }

    /**
     * set 小图行数，取值必须大于 0
     *
     * @param rows
     */
    public void setRows(Integer rows) {
        this.rows = rows;
    }

    /**
     * get 小图列数，取值必须大于 0
假设 rows * columns &#x3D; N
若 intervalTime 为 0，则从 startTime 开始，平均截取 N 张图片；
若 intervalTime 不为 0，则从 startTime 开始，依次间隔截图，最多截取 N 张图，若实际截图张数小于 N，则雪碧图合成时用黑图填充

     *
     * @return
     */
    public Integer getColumns() {
        return columns;
    }

    /**
     * set 小图列数，取值必须大于 0
假设 rows * columns &#x3D; N
若 intervalTime 为 0，则从 startTime 开始，平均截取 N 张图片；
若 intervalTime 不为 0，则从 startTime 开始，依次间隔截图，最多截取 N 张图，若实际截图张数小于 N，则雪碧图合成时用黑图填充

     *
     * @param columns
     */
    public void setColumns(Integer columns) {
        this.columns = columns;
    }

    /**
     * get 截图存储格式。取值范围：png、jpg
     *
     * @return
     */
    public String getFormat() {
        return format;
    }

    /**
     * set 截图存储格式。取值范围：png、jpg
     *
     * @param format
     */
    public void setFormat(String format) {
        this.format = format;
    }

    /**
     * get 截图帧类型。取值范围：any、key
     *
     * @return
     */
    public String getFrameType() {
        return frameType;
    }

    /**
     * set 截图帧类型。取值范围：any、key
     *
     * @param frameType
     */
    public void setFrameType(String frameType) {
        this.frameType = frameType;
    }

    /**
     * get 截图宽度，单位 px，取值须大于 0
     *
     * @return
     */
    public Integer getCellWidth() {
        return cellWidth;
    }

    /**
     * set 截图宽度，单位 px，取值须大于 0
     *
     * @param cellWidth
     */
    public void setCellWidth(Integer cellWidth) {
        this.cellWidth = cellWidth;
    }

    /**
     * get 截图高度，单位 px，取值须大于 0
若 width、height 都不为 0，则截图分辨率为 width * height
若 width、height 某一项为 0，则该项随另一项等比缩放
若 width、height 两项都为 0, 则截图分辨率随源视频

     *
     * @return
     */
    public Integer getCellHeight() {
        return cellHeight;
    }

    /**
     * set 截图高度，单位 px，取值须大于 0
若 width、height 都不为 0，则截图分辨率为 width * height
若 width、height 某一项为 0，则该项随另一项等比缩放
若 width、height 两项都为 0, 则截图分辨率随源视频

     *
     * @param cellHeight
     */
    public void setCellHeight(Integer cellHeight) {
        this.cellHeight = cellHeight;
    }

    /**
     * get 是否保留原截图
     *
     * @return
     */
    public Boolean getDoKeepShots() {
        return doKeepShots;
    }

    /**
     * set 是否保留原截图
     *
     * @param doKeepShots
     */
    public void setDoKeepShots(Boolean doKeepShots) {
        this.doKeepShots = doKeepShots;
    }


    /**
     * set 截图开始时间，单位毫秒，缺省值为 0
     *
     * @param startTime
     */
    public SnapshotTemplateSpriteConfigInfo startTime(Long startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * set 截图间隔时间，单位毫秒，缺省值为 0
     *
     * @param intervalTime
     */
    public SnapshotTemplateSpriteConfigInfo intervalTime(Long intervalTime) {
        this.intervalTime = intervalTime;
        return this;
    }

    /**
     * set 小图行数，取值必须大于 0
     *
     * @param rows
     */
    public SnapshotTemplateSpriteConfigInfo rows(Integer rows) {
        this.rows = rows;
        return this;
    }

    /**
     * set 小图列数，取值必须大于 0
假设 rows * columns &#x3D; N
若 intervalTime 为 0，则从 startTime 开始，平均截取 N 张图片；
若 intervalTime 不为 0，则从 startTime 开始，依次间隔截图，最多截取 N 张图，若实际截图张数小于 N，则雪碧图合成时用黑图填充

     *
     * @param columns
     */
    public SnapshotTemplateSpriteConfigInfo columns(Integer columns) {
        this.columns = columns;
        return this;
    }

    /**
     * set 截图存储格式。取值范围：png、jpg
     *
     * @param format
     */
    public SnapshotTemplateSpriteConfigInfo format(String format) {
        this.format = format;
        return this;
    }

    /**
     * set 截图帧类型。取值范围：any、key
     *
     * @param frameType
     */
    public SnapshotTemplateSpriteConfigInfo frameType(String frameType) {
        this.frameType = frameType;
        return this;
    }

    /**
     * set 截图宽度，单位 px，取值须大于 0
     *
     * @param cellWidth
     */
    public SnapshotTemplateSpriteConfigInfo cellWidth(Integer cellWidth) {
        this.cellWidth = cellWidth;
        return this;
    }

    /**
     * set 截图高度，单位 px，取值须大于 0
若 width、height 都不为 0，则截图分辨率为 width * height
若 width、height 某一项为 0，则该项随另一项等比缩放
若 width、height 两项都为 0, 则截图分辨率随源视频

     *
     * @param cellHeight
     */
    public SnapshotTemplateSpriteConfigInfo cellHeight(Integer cellHeight) {
        this.cellHeight = cellHeight;
        return this;
    }

    /**
     * set 是否保留原截图
     *
     * @param doKeepShots
     */
    public SnapshotTemplateSpriteConfigInfo doKeepShots(Boolean doKeepShots) {
        this.doKeepShots = doKeepShots;
        return this;
    }


}